{
  "tag": "ion-nav",
  "encapsulation": "shadow",
  "readme": "# ion-nav\n\nNav is a standalone component for loading arbitrary components and pushing to new components on to the stack.\nUnlike RouterOutlet, Nav is not tied to a particular router. Meaning that if we load a Nav component, and push other components to the stack, they will not affect the apps overall router. This fits use cases where you could have a modal, which needs it's own sub-navigation, but not make it tied to the apps URL.\n\n",
  "docs": "Nav is a standalone component for loading arbitrary components and pushing to new components on to the stack.\nUnlike RouterOutlet, Nav is not tied to a particular router. Meaning that if we load a Nav component, and push other components to the stack, they will not affect the apps overall router. This fits use cases where you could have a modal, which needs it's own sub-navigation, but not make it tied to the apps URL.",
  "docsTags": [],
  "usage": {},
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the nav should animate the transition of components.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    },
    {
      "name": "animation",
      "type": "((Animation: Animation, baseEl: any, opts?: any) => Promise<Animation>) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "By default `ion-nav` animates transition between pages based in the mode (ios or material design).\nHowever, this property allows to create custom transition using `AnimateBuilder` functions.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "root",
      "type": "Function | HTMLElement | ViewController | null | string | undefined",
      "mutable": false,
      "attr": "root",
      "reflectToAttr": false,
      "docs": "Root NavComponent to load",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "rootParams",
      "type": "undefined | { [key: string]: any; }",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Any parameters for the root component",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "swipeGesture",
      "type": "boolean | undefined",
      "mutable": true,
      "attr": "swipe-gesture",
      "reflectToAttr": false,
      "docs": "If the nav component should allow for swipe-to-go-back.",
      "docsTags": [],
      "optional": true,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "canGoBack",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "canGoBack(view?: ViewController | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "view",
          "type": "ViewController | undefined",
          "docs": "The view to check."
        }
      ],
      "docs": "Returns `true` if the current view can go back.",
      "docsTags": [
        {
          "name": "param",
          "text": "view The view to check."
        }
      ]
    },
    {
      "name": "getActive",
      "returns": {
        "type": "Promise<ViewController | undefined>",
        "docs": ""
      },
      "signature": "getActive() => Promise<ViewController | undefined>",
      "parameters": [],
      "docs": "Get the active view.",
      "docsTags": []
    },
    {
      "name": "getByIndex",
      "returns": {
        "type": "Promise<ViewController | undefined>",
        "docs": ""
      },
      "signature": "getByIndex(index: number) => Promise<ViewController | undefined>",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "docs": "The index of the view."
        }
      ],
      "docs": "Get the view at the specified index.",
      "docsTags": [
        {
          "name": "param",
          "text": "index The index of the view."
        }
      ]
    },
    {
      "name": "getPrevious",
      "returns": {
        "type": "Promise<ViewController | undefined>",
        "docs": ""
      },
      "signature": "getPrevious(view?: ViewController | undefined) => Promise<ViewController | undefined>",
      "parameters": [
        {
          "name": "view",
          "type": "ViewController | undefined",
          "docs": "The view to get."
        }
      ],
      "docs": "Get the previous view.",
      "docsTags": [
        {
          "name": "param",
          "text": "view The view to get."
        }
      ]
    },
    {
      "name": "insert",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "insert<T extends NavComponent>(insertIndex: number, component: T, componentProps?: ComponentProps<T> | null | undefined, opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "insertIndex",
          "type": "number",
          "docs": "The index to insert the component at in the stack."
        },
        {
          "name": "component",
          "type": "T",
          "docs": "The component to insert into the navigation stack."
        },
        {
          "name": "componentProps",
          "type": "T extends \"object\" | \"ion-icon\" | \"ion-action-sheet-controller\" | \"ion-action-sheet\" | \"ion-alert-controller\" | \"ion-alert\" | \"ion-anchor\" | \"ion-app\" | \"ion-avatar\" | \"ion-back-button\" | \"ion-backdrop\" | \"ion-badge\" | \"ion-button\" | \"ion-buttons\" | \"ion-card-content\" | \"ion-card-header\" | \"ion-card-subtitle\" | \"ion-card-title\" | \"ion-card\" | \"ion-checkbox\" | \"ion-chip\" | \"ion-col\" | \"ion-content\" | \"ion-datetime\" | \"ion-fab-button\" | \"ion-fab-list\" | \"ion-fab\" | \"ion-footer\" | \"ion-grid\" | \"ion-header\" | \"ion-img\" | \"ion-infinite-scroll-content\" | \"ion-infinite-scroll\" | \"ion-input\" | \"ion-item-divider\" | \"ion-item-group\" | \"ion-item-option\" | \"ion-item-options\" | \"ion-item-sliding\" | \"ion-item\" | \"ion-label\" | \"ion-list-header\" | \"ion-list\" | \"ion-loading-controller\" | \"ion-loading\" | \"ion-menu-button\" | \"ion-menu-controller\" | \"ion-menu-toggle\" | \"ion-menu\" | \"ion-modal-controller\" | \"ion-modal\" | \"ion-nav-pop\" | \"ion-nav-push\" | \"ion-nav-set-root\" | \"ion-nav\" | \"ion-note\" | \"ion-picker-column\" | \"ion-picker-controller\" | \"ion-picker\" | \"ion-popover-controller\" | \"ion-popover\" | \"ion-progress-bar\" | \"ion-radio-group\" | \"ion-radio\" | \"ion-range\" | \"ion-refresher-content\" | \"ion-refresher\" | \"ion-reorder-group\" | \"ion-reorder\" | \"ion-ripple-effect\" | \"ion-route-redirect\" | \"ion-route\" | \"ion-router-outlet\" | \"ion-router\" | \"ion-row\" | \"ion-searchbar\" | \"ion-segment-button\" | \"ion-segment\" | \"ion-select-option\" | \"ion-select-popover\" | \"ion-select\" | \"ion-skeleton-text\" | \"ion-slide\" | \"ion-slides\" | \"ion-spinner\" | \"ion-split-pane\" | \"ion-tab-bar\" | \"ion-tab-button\" | \"ion-tab\" | \"ion-tabs\" | \"ion-text\" | \"ion-textarea\" | \"ion-thumbnail\" | \"ion-title\" | \"ion-toast-controller\" | \"ion-toast\" | \"ion-toggle\" | \"ion-toolbar\" | \"ion-virtual-scroll\" | \"slot\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" ? StencilIntrinsicElements[T] : { [key: string]: any; } | null | undefined",
          "docs": "Any properties of the component."
        },
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Inserts a component into the navigation stack at the specified index.\nThis is useful to add a component at any point in the navigation stack.",
      "docsTags": [
        {
          "name": "param",
          "text": "insertIndex The index to insert the component at in the stack."
        },
        {
          "name": "param",
          "text": "component The component to insert into the navigation stack."
        },
        {
          "name": "param",
          "text": "componentProps Any properties of the component."
        },
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "insertPages",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "insertPages(insertIndex: number, insertComponents: NavComponent[], opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "insertIndex",
          "type": "number",
          "docs": "The index to insert the components at in the stack."
        },
        {
          "name": "insertComponents",
          "type": "NavComponent[]",
          "docs": "The components to insert into the navigation stack."
        },
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Inserts an array of components into the navigation stack at the specified index.\nThe last component in the array will become instantiated as a view, and animate\nin to become the active view.",
      "docsTags": [
        {
          "name": "param",
          "text": "insertIndex The index to insert the components at in the stack."
        },
        {
          "name": "param",
          "text": "insertComponents The components to insert into the navigation stack."
        },
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "pop",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "pop(opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Pop a component off of the navigation stack. Navigates back from the current\ncomponent.",
      "docsTags": [
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "popTo",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "popTo(indexOrViewCtrl: number | ViewController, opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "indexOrViewCtrl",
          "type": "ViewController | number",
          "docs": "The index or view controller to pop to."
        },
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Pop to a specific index in the navigation stack.",
      "docsTags": [
        {
          "name": "param",
          "text": "indexOrViewCtrl The index or view controller to pop to."
        },
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "popToRoot",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "popToRoot(opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Navigate back to the root of the stack, no matter how far back that is.",
      "docsTags": [
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "push",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "push<T extends NavComponent>(component: T, componentProps?: ComponentProps<T> | null | undefined, opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "component",
          "type": "T",
          "docs": "The component to push onto the navigation stack."
        },
        {
          "name": "componentProps",
          "type": "T extends \"object\" | \"ion-icon\" | \"ion-action-sheet-controller\" | \"ion-action-sheet\" | \"ion-alert-controller\" | \"ion-alert\" | \"ion-anchor\" | \"ion-app\" | \"ion-avatar\" | \"ion-back-button\" | \"ion-backdrop\" | \"ion-badge\" | \"ion-button\" | \"ion-buttons\" | \"ion-card-content\" | \"ion-card-header\" | \"ion-card-subtitle\" | \"ion-card-title\" | \"ion-card\" | \"ion-checkbox\" | \"ion-chip\" | \"ion-col\" | \"ion-content\" | \"ion-datetime\" | \"ion-fab-button\" | \"ion-fab-list\" | \"ion-fab\" | \"ion-footer\" | \"ion-grid\" | \"ion-header\" | \"ion-img\" | \"ion-infinite-scroll-content\" | \"ion-infinite-scroll\" | \"ion-input\" | \"ion-item-divider\" | \"ion-item-group\" | \"ion-item-option\" | \"ion-item-options\" | \"ion-item-sliding\" | \"ion-item\" | \"ion-label\" | \"ion-list-header\" | \"ion-list\" | \"ion-loading-controller\" | \"ion-loading\" | \"ion-menu-button\" | \"ion-menu-controller\" | \"ion-menu-toggle\" | \"ion-menu\" | \"ion-modal-controller\" | \"ion-modal\" | \"ion-nav-pop\" | \"ion-nav-push\" | \"ion-nav-set-root\" | \"ion-nav\" | \"ion-note\" | \"ion-picker-column\" | \"ion-picker-controller\" | \"ion-picker\" | \"ion-popover-controller\" | \"ion-popover\" | \"ion-progress-bar\" | \"ion-radio-group\" | \"ion-radio\" | \"ion-range\" | \"ion-refresher-content\" | \"ion-refresher\" | \"ion-reorder-group\" | \"ion-reorder\" | \"ion-ripple-effect\" | \"ion-route-redirect\" | \"ion-route\" | \"ion-router-outlet\" | \"ion-router\" | \"ion-row\" | \"ion-searchbar\" | \"ion-segment-button\" | \"ion-segment\" | \"ion-select-option\" | \"ion-select-popover\" | \"ion-select\" | \"ion-skeleton-text\" | \"ion-slide\" | \"ion-slides\" | \"ion-spinner\" | \"ion-split-pane\" | \"ion-tab-bar\" | \"ion-tab-button\" | \"ion-tab\" | \"ion-tabs\" | \"ion-text\" | \"ion-textarea\" | \"ion-thumbnail\" | \"ion-title\" | \"ion-toast-controller\" | \"ion-toast\" | \"ion-toggle\" | \"ion-toolbar\" | \"ion-virtual-scroll\" | \"slot\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" ? StencilIntrinsicElements[T] : { [key: string]: any; } | null | undefined",
          "docs": "Any properties of the component."
        },
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Push a new component onto the current navigation stack. Pass any additional\ninformation along as an object. This additional information is accessible\nthrough NavParams.",
      "docsTags": [
        {
          "name": "param",
          "text": "component The component to push onto the navigation stack."
        },
        {
          "name": "param",
          "text": "componentProps Any properties of the component."
        },
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "removeIndex",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "removeIndex(startIndex: number, removeCount?: number, opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "startIndex",
          "type": "number",
          "docs": "The number to begin removal at."
        },
        {
          "name": "removeCount",
          "type": "number",
          "docs": "The number of components to remove."
        },
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Removes a component from the navigation stack at the specified index.",
      "docsTags": [
        {
          "name": "param",
          "text": "startIndex The number to begin removal at."
        },
        {
          "name": "param",
          "text": "removeCount The number of components to remove."
        },
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "setPages",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "setPages(views: any[], opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "views",
          "type": "any[]",
          "docs": "The list of views to set as the navigation stack."
        },
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Set the views of the current navigation stack and navigate to the last view.\nBy default animations are disabled, but they can be enabled by passing options\nto the navigation controller. Navigation parameters can also be passed to the\nindividual pages in the array.",
      "docsTags": [
        {
          "name": "param",
          "text": "views The list of views to set as the navigation stack."
        },
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    },
    {
      "name": "setRoot",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "setRoot<T extends NavComponent>(component: T, componentProps?: ComponentProps<T> | null | undefined, opts?: NavOptions | null | undefined, done?: TransitionDoneFn | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "component",
          "type": "T",
          "docs": "The component to set as the root of the navigation stack."
        },
        {
          "name": "componentProps",
          "type": "T extends \"object\" | \"ion-icon\" | \"ion-action-sheet-controller\" | \"ion-action-sheet\" | \"ion-alert-controller\" | \"ion-alert\" | \"ion-anchor\" | \"ion-app\" | \"ion-avatar\" | \"ion-back-button\" | \"ion-backdrop\" | \"ion-badge\" | \"ion-button\" | \"ion-buttons\" | \"ion-card-content\" | \"ion-card-header\" | \"ion-card-subtitle\" | \"ion-card-title\" | \"ion-card\" | \"ion-checkbox\" | \"ion-chip\" | \"ion-col\" | \"ion-content\" | \"ion-datetime\" | \"ion-fab-button\" | \"ion-fab-list\" | \"ion-fab\" | \"ion-footer\" | \"ion-grid\" | \"ion-header\" | \"ion-img\" | \"ion-infinite-scroll-content\" | \"ion-infinite-scroll\" | \"ion-input\" | \"ion-item-divider\" | \"ion-item-group\" | \"ion-item-option\" | \"ion-item-options\" | \"ion-item-sliding\" | \"ion-item\" | \"ion-label\" | \"ion-list-header\" | \"ion-list\" | \"ion-loading-controller\" | \"ion-loading\" | \"ion-menu-button\" | \"ion-menu-controller\" | \"ion-menu-toggle\" | \"ion-menu\" | \"ion-modal-controller\" | \"ion-modal\" | \"ion-nav-pop\" | \"ion-nav-push\" | \"ion-nav-set-root\" | \"ion-nav\" | \"ion-note\" | \"ion-picker-column\" | \"ion-picker-controller\" | \"ion-picker\" | \"ion-popover-controller\" | \"ion-popover\" | \"ion-progress-bar\" | \"ion-radio-group\" | \"ion-radio\" | \"ion-range\" | \"ion-refresher-content\" | \"ion-refresher\" | \"ion-reorder-group\" | \"ion-reorder\" | \"ion-ripple-effect\" | \"ion-route-redirect\" | \"ion-route\" | \"ion-router-outlet\" | \"ion-router\" | \"ion-row\" | \"ion-searchbar\" | \"ion-segment-button\" | \"ion-segment\" | \"ion-select-option\" | \"ion-select-popover\" | \"ion-select\" | \"ion-skeleton-text\" | \"ion-slide\" | \"ion-slides\" | \"ion-spinner\" | \"ion-split-pane\" | \"ion-tab-bar\" | \"ion-tab-button\" | \"ion-tab\" | \"ion-tabs\" | \"ion-text\" | \"ion-textarea\" | \"ion-thumbnail\" | \"ion-title\" | \"ion-toast-controller\" | \"ion-toast\" | \"ion-toggle\" | \"ion-toolbar\" | \"ion-virtual-scroll\" | \"slot\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" ? StencilIntrinsicElements[T] : { [key: string]: any; } | null | undefined",
          "docs": "Any properties of the component."
        },
        {
          "name": "opts",
          "type": "NavOptions | null | undefined",
          "docs": "The navigation options."
        },
        {
          "name": "done",
          "type": "((hasCompleted: boolean, requiresTransition: boolean, enteringView?: ViewController | undefined, leavingView?: ViewController | undefined, direction?: string | undefined) => void) | undefined",
          "docs": "The transition complete function."
        }
      ],
      "docs": "Set the root for the current navigation stack to a component.",
      "docsTags": [
        {
          "name": "param",
          "text": "component The component to set as the root of the navigation stack."
        },
        {
          "name": "param",
          "text": "componentProps Any properties of the component."
        },
        {
          "name": "param",
          "text": "opts The navigation options."
        },
        {
          "name": "param",
          "text": "done The transition complete function."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionNavDidChange",
      "detail": "void",
      "bubbles": false,
      "cancelable": true,
      "composed": true,
      "docs": "Event fired when the nav has changed components",
      "docsTags": []
    },
    {
      "event": "ionNavWillChange",
      "detail": "void",
      "bubbles": false,
      "cancelable": true,
      "composed": true,
      "docs": "Event fired when the nav will change components",
      "docsTags": []
    }
  ],
  "styles": [],
  "slots": []
}