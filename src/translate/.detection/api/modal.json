{
  "tag": "ion-modal",
  "encapsulation": "scoped",
  "readme": "# ion-modal\n\nA Modal is a dialog that appears on top of the app's content, and must be dismissed by the app before interaction can resume. It is useful as a select component when there are a lot of options to choose from, or when filtering items in a list, as well as many other use cases.\n\n\n### Creating\n\nModals can be created using a [Modal Controller](../modal-controller). They can be customized by passing modal options in the modal controller's create method.\n\n\n### Passing parameters\n\nWhen a modal is created, parameters might be passed to the newly created modal:\n\n```ts\n// Create a modal using MyModalComponent with some initial data\nconst modal = await modalController.create({\n  component: MyModalComponent,\n  componentProps: {\n    'prop1': value,\n    'prop2': value2\n  }\n});\n```\n\nUnder the hood, the controller creates a new `ion-modal` and attaches the specified component to it.\nIt also assigns the specified `componentProps` to the component's instance:\n\n```js\n// pseudo-code\nconst instance = create(MyModalComponent);\ninstance.prop1 = value;\ninstance.prop2 = value2;\n```\n\nThis way, your component can access the passed params, check the \"Usage\" section for further code example for each frameworks.\n\n\n### Returning data\n\nModals can also return data back to the controller when they are dismissed.\n\n```js\nconst modal = await modalController.create({...});\nconst { data } = await modal.onDidDismiss();\nconsole.log(data);\n```\n\n```js\n// Dismiss the top modal returning some data object\nmodalController.dismiss({\n  'result': value\n})\n```\n",
  "docs": "A Modal is a dialog that appears on top of the app's content, and must be dismissed by the app before interaction can resume. It is useful as a select component when there are a lot of options to choose from, or when filtering items in a list, as well as many other use cases.",
  "docsTags": [],
  "usage": {
    "angular": "```typescript\nimport { Component } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { ModalPage } from '../modal/modal.page';\n@Component({\n  selector: 'modal-example',\n  templateUrl: 'modal-example.html',\n  styleUrls: ['./modal-example.css']\n})\nexport class ModalExample {\n  constructor(public modalController: ModalController) {}\n\n  async presentModal() {\n    const modal = await this.modalController.create({\n      component: ModalPage,\n      componentProps: { value: 123 }\n    });\n    return await modal.present();\n  }\n}\n```\n\n```typescript\nimport { Component, Input } from '@angular/core';\nimport { NavParams } from '@ionic/angular';\n\n@Component({\n  selector: 'modal-page',\n})\nexport class ModalExample {\n\n  // \"value\" passed in componentProps\n  @Input() value: number;\n\n  constructor(navParams: NavParams) {\n    // componentProps can also be accessed at construction time using NavParams\n  }\n\n}\n```\n\n#### Lazy Loading\n\nWhen lazy loading a modal, it's important to note that the modal will not be loaded when it is opened, but rather when the module that imports the modal's module is loaded.\n\nFor example, say there exists a `CalendarComponent` and an `EventModal`. The modal is presented by clicking a button in the `CalendarComponent`. In Angular, the `EventModalModule` would need to be included in the `CalendarComponentModule` since the modal is created in the `CalendarComponent`:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\n\nimport { CalendarComponent } from './calendar.component';\nimport { EventModalModule } from '../modals/event/event.module';\n\n@NgModule({\n    declarations: [\n        CalendarComponent\n    ],\n    imports: [\n      IonicModule,\n      CommonModule,\n      EventModalModule\n    ],\n    exports: [\n      CalendarComponent\n    ]\n})\n\nexport class CalendarComponentModule {}\n```",
    "javascript": "```html\n<body>\n  <ion-modal-controller></ion-modal-controller>\n</body>\n```\n\n```javascript\ncustomElements.define('modal-page', class extends HTMLElement {\n  connectedCallback() {\n    this.innerHTML = `\n<ion-header>\n  <ion-toolbar>\n    <ion-title>Super Modal</ion-title>\n  </ion-toolbar>\n</ion-header>\n<ion-content>\n  Content\n</ion-content>`;\n  }\n});\n\nasync function presentModal() {\n  // initialize controller\n  const modalController = document.querySelector('ion-modal-controller');\n  await modalController.componentOnReady();\n\n  // present the modal\n  const modalElement = await modalController.create({\n    component: 'modal-page'\n  });\n  await modalElement.present();\n}\n```\n",
    "react": "```tsx\nimport React, { Component } from 'react'\nimport { IonModal } from '@ionic/react';\n\ntype Props = {}\ntype State = {\n  showModal: boolean\n}\n\nexport class ModalExample extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showModal: false\n    };\n  }\n\n  render() {\n    return (\n      <IonModal\n        isOpen={this.state.showModal}\n        onDidDismiss={() => this.setState(() => ({ showModal: false }))}\n      >\n        <p>This is modal content</p>\n        <IonButton onClick={() => this.setState(() => ({ showModal: false }))}>\n          Close Modal\n        </IonButton>\n      </IonModal>\n    );\n  }\n}\n```\n",
    "vue": "```html\n<template>\n  <div>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>{{ title }}</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    <ion-content padding>\n      {{ content }}\n    </ion-content>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Modal',\n  props: {\n    title: { type: String, default: 'Super Modal' },\n  },\n  data() {\n    return {\n      content: 'Content',\n    }\n  },\n}\n</script>\n```\n\n```html\n<template>\n  <ion-page class=\"ion-page\" main>\n    <ion-content class=\"ion-content\" padding>\n      <ion-button @click=\"openModal\">Open Modal</ion-button>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script>\nimport Modal from './modal.vue'\n\nexport default {\n  methods: {\n    openModal() {\n      return this.$ionic.modalController\n        .create({\n          component: Modal,\n          componentProps: {\n            data: {\n              content: 'New Content',\n            },\n            propsData: {\n              title: 'New title',\n            },\n          },\n        })\n        .then(m => m.present())\n    },\n  },\n}\n</script>\n```\n"
  },
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the modal will animate.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the modal will be dismissed when the backdrop is clicked.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    },
    {
      "name": "component",
      "type": "Function | HTMLElement | null | string",
      "mutable": false,
      "attr": "component",
      "reflectToAttr": false,
      "docs": "The component to display inside of the modal.",
      "docsTags": [],
      "optional": false,
      "required": true
    },
    {
      "name": "componentProps",
      "type": "undefined | { [key: string]: any; }",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "The data to pass to the modal component.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "cssClass",
      "type": "string | string[] | undefined",
      "mutable": false,
      "attr": "css-class",
      "reflectToAttr": false,
      "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "enterAnimation",
      "type": "((Animation: Animation, baseEl: any, opts?: any) => Promise<Animation>) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the modal is presented.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    },
    {
      "name": "leaveAnimation",
      "type": "((Animation: Animation, baseEl: any, opts?: any) => Promise<Animation>) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the modal is dismissed.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "optional": false,
      "required": false
    },
    {
      "name": "showBackdrop",
      "type": "boolean",
      "mutable": false,
      "attr": "show-backdrop",
      "reflectToAttr": false,
      "docs": "If `true`, a backdrop will be displayed behind the modal.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "dismiss(data?: any, role?: string | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "docs": "Any data to emit in the dismiss events."
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": "The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'."
        }
      ],
      "docs": "Dismiss the modal overlay after it has been presented.",
      "docsTags": [
        {
          "name": "param",
          "text": "data Any data to emit in the dismiss events."
        },
        {
          "name": "param",
          "text": "role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'."
        }
      ]
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<any>>",
        "docs": ""
      },
      "signature": "onDidDismiss() => Promise<OverlayEventDetail<any>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the modal did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<any>>",
        "docs": ""
      },
      "signature": "onWillDismiss() => Promise<OverlayEventDetail<any>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the modal will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the modal overlay after it has been created.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionModalDidDismiss",
      "detail": "OverlayEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the modal has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionModalDidPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the modal has presented.",
      "docsTags": []
    },
    {
      "event": "ionModalWillDismiss",
      "detail": "OverlayEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the modal has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionModalWillPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the modal has presented.",
      "docsTags": []
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the modal content"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the modal content"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the modal content"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the modal content"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the modal content"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "Height of the modal"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the modal"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the modal"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the modal"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the modal"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the modal"
    }
  ],
  "slots": []
}