{
  "tag": "ion-content",
  "encapsulation": "shadow",
  "readme": "# ion-content\n\nContent component provides an easy to use content area with some useful methods\nto control the scrollable area. There should only be one content in a single\nview component.\n",
  "docs": "Content component provides an easy to use content area with some useful methods\nto control the scrollable area. There should only be one content in a single\nview component.",
  "docsTags": [
    {
      "name": "slot",
      "text": "- Content is placed in the scrollable area if provided without a slot."
    },
    {
      "name": "slot",
      "text": "fixed - Should be used for fixed content that should not scroll."
    }
  ],
  "usage": {
    "angular": "```html\n<ion-content\n  [scrollEvents]=\"true\"\n  (ionScrollStart)=\"logScrollStart()\"\n  (ionScroll)=\"logScrolling($event)\"\n  (ionScrollEnd)=\"logScrollEnd()\">\n</ion-content>\n```\n\n",
    "javascript": "```html\n<ion-content></ion-content>\n```\n\n```javascript\nvar content = document.querySelector('ion-content');\ncontent.scrollEvents = true;\ncontent.addEventListener('ionScrollStart', () => console.log('scroll start'));\ncontent.addEventListener('ionScroll', (ev) => console.log('scroll', ev.detail));\ncontent.addEventListener('ionScrollEnd', () => console.log('scroll end'));\n```\n",
    "react": "```tsx\nimport React from 'react';\n\nimport { IonContent } from '@ionic/react';\n\nconst Example: React.SFC<{}> = () => (\n  <IonContent\n    scrollEvents={true}\n    onIonScrollStart={() => {}}\n    onIonScroll={() => {}}\n    onIonScrollEnd={() => {}}>\n  </IonContent>\n);\n\nexport default Example;\n```\n",
    "vue": "```html\n<template>\n  <ion-content\n    :scrollEvents=\"true\"\n    @ionScrollStart=\"logScrollStart()\"\n    @ionScroll=\"logScrolling($event)\"\n    @ionScrollEnd=\"logScrollEnd()\">\n  </ion-content>\n</template>\n```\n\n"
  },
  "props": [
    {
      "name": "color",
      "type": "string | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": false,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "forceOverscroll",
      "type": "boolean | undefined",
      "mutable": true,
      "attr": "force-overscroll",
      "reflectToAttr": false,
      "docs": "If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce.\nIf the content exceeds the bounds of ionContent, nothing will change.\nNote, the does not disable the system bounce on iOS. That is an OS level setting.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "fullscreen",
      "type": "boolean",
      "mutable": false,
      "attr": "fullscreen",
      "reflectToAttr": false,
      "docs": "If `true`, the content will scroll behind the headers\nand footers. This effect can easily be seen by setting the toolbar\nto transparent.",
      "docsTags": [],
      "default": "false",
      "optional": false,
      "required": false
    },
    {
      "name": "scrollEvents",
      "type": "boolean",
      "mutable": false,
      "attr": "scroll-events",
      "reflectToAttr": false,
      "docs": "Because of performance reasons, ionScroll events are disabled by default, in order to enable them\nand start listening from (ionScroll), set this property to `true`.",
      "docsTags": [],
      "default": "false",
      "optional": false,
      "required": false
    },
    {
      "name": "scrollX",
      "type": "boolean",
      "mutable": false,
      "attr": "scroll-x",
      "reflectToAttr": false,
      "docs": "If you want to enable the content scrolling in the X axis, set this property to `true`.",
      "docsTags": [],
      "default": "false",
      "optional": false,
      "required": false
    },
    {
      "name": "scrollY",
      "type": "boolean",
      "mutable": false,
      "attr": "scroll-y",
      "reflectToAttr": false,
      "docs": "If you want to disable the content scrolling in the Y axis, set this property to `false`.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "getScrollElement",
      "returns": {
        "type": "Promise<HTMLElement>",
        "docs": ""
      },
      "signature": "getScrollElement() => Promise<HTMLElement>",
      "parameters": [],
      "docs": "Get the element where the actual scrolling takes place.\nThis element can be used to subscribe to `scroll` events or manually modify\n`scrollTop`. However, it's recommended to use the API provided by `ion-content`:\n\ni.e. Using `ionScroll`, `ionScrollStart`, `ionScrollEnd` for scrolling events\nand `scrollToPoint()` to scroll the content into a certain point.",
      "docsTags": []
    },
    {
      "name": "scrollByPoint",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "scrollByPoint(x: number, y: number, duration: number) => Promise<void>",
      "parameters": [
        {
          "name": "x",
          "type": "number",
          "docs": "The amount to scroll by on the horizontal axis."
        },
        {
          "name": "y",
          "type": "number",
          "docs": "The amount to scroll by on the vertical axis."
        },
        {
          "name": "duration",
          "type": "number",
          "docs": "The amount of time to take scrolling by that amount."
        }
      ],
      "docs": "Scroll by a specified X/Y distance in the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "x The amount to scroll by on the horizontal axis."
        },
        {
          "name": "param",
          "text": "y The amount to scroll by on the vertical axis."
        },
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling by that amount."
        }
      ]
    },
    {
      "name": "scrollToBottom",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "scrollToBottom(duration?: number) => Promise<void>",
      "parameters": [
        {
          "name": "duration",
          "type": "number",
          "docs": "The amount of time to take scrolling to the bottom. Defaults to `0`."
        }
      ],
      "docs": "Scroll to the bottom of the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling to the bottom. Defaults to `0`."
        }
      ]
    },
    {
      "name": "scrollToPoint",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "scrollToPoint(x: number | null | undefined, y: number | null | undefined, duration?: number) => Promise<void>",
      "parameters": [
        {
          "name": "x",
          "type": "null | number | undefined",
          "docs": "The point to scroll to on the horizontal axis."
        },
        {
          "name": "y",
          "type": "null | number | undefined",
          "docs": "The point to scroll to on the vertical axis."
        },
        {
          "name": "duration",
          "type": "number",
          "docs": "The amount of time to take scrolling to that point. Defaults to `0`."
        }
      ],
      "docs": "Scroll to a specified X/Y location in the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "x The point to scroll to on the horizontal axis."
        },
        {
          "name": "param",
          "text": "y The point to scroll to on the vertical axis."
        },
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling to that point. Defaults to `0`."
        }
      ]
    },
    {
      "name": "scrollToTop",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "scrollToTop(duration?: number) => Promise<void>",
      "parameters": [
        {
          "name": "duration",
          "type": "number",
          "docs": "The amount of time to take scrolling to the top. Defaults to `0`."
        }
      ],
      "docs": "Scroll to the top of the component.",
      "docsTags": [
        {
          "name": "param",
          "text": "duration The amount of time to take scrolling to the top. Defaults to `0`."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionScroll",
      "detail": "ScrollDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted while scrolling. This event is disabled by default.\nLook at the property: `scrollEvents`",
      "docsTags": []
    },
    {
      "event": "ionScrollEnd",
      "detail": "ScrollBaseDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the scroll has ended.",
      "docsTags": []
    },
    {
      "event": "ionScrollStart",
      "detail": "ScrollBaseDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the scroll has started.",
      "docsTags": []
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the Content"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the Content"
    },
    {
      "name": "--keyboard-offset",
      "annotation": "prop",
      "docs": "Keyboard offset of the Content"
    },
    {
      "name": "--offset-bottom",
      "annotation": "prop",
      "docs": "Offset bottom of the Content"
    },
    {
      "name": "--offset-top",
      "annotation": "prop",
      "docs": "Offset top of the Content"
    },
    {
      "name": "--padding-bottom",
      "annotation": "prop",
      "docs": "Padding bottom of the Content"
    },
    {
      "name": "--padding-end",
      "annotation": "prop",
      "docs": "Padding end of the Content"
    },
    {
      "name": "--padding-start",
      "annotation": "prop",
      "docs": "Padding start of the Content"
    },
    {
      "name": "--padding-top",
      "annotation": "prop",
      "docs": "Padding top of the Content"
    }
  ],
  "slots": [
    {
      "name": "",
      "docs": "Content is placed in the scrollable area if provided without a slot."
    },
    {
      "name": "fixed",
      "docs": "Should be used for fixed content that should not scroll."
    }
  ]
}