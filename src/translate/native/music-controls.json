{
  "packageName": "@ionic-native/music-controls",
  "displayName": "Music Controls",
  "description": "\nMusic controls for Cordova applications.\nDisplay a 'media' notification with play/pause, previous, next buttons, allowing the user to control the play.\nHandle also headset event (plug, unplug, headset button).\n",
  "usage": "\n```typescript\nimport { MusicControls } from '@ionic-native/music-controls/ngx';\n\nconstructor(private musicControls: MusicControls) { }\n\n...\n\nthis.musicControls.create({\n  track       : 'Time is Running Out',        // optional, default : ''\n  artist      : 'Muse',                       // optional, default : ''\n  cover       : 'albums/absolution.jpg',      // optional, default : nothing\n  // cover can be a local path (use fullpath 'file:///storage/emulated/...', or only 'my_image.jpg' if my_image.jpg is in the www folder of your app)\n  //           or a remote url ('http://...', 'https://...', 'ftp://...')\n  isPlaying   : true,                         // optional, default : true\n  dismissable : true,                         // optional, default : false\n\n  // hide previous/next/close buttons:\n  hasPrev   : false,      // show previous button, optional, default: true\n  hasNext   : false,      // show next button, optional, default: true\n  hasClose  : true,       // show close button, optional, default: false\n\n// iOS only, optional\n  album       : 'Absolution',     // optional, default: ''\n  duration : 60, // optional, default: 0\n  elapsed : 10, // optional, default: 0\n  hasSkipForward : true,  // show skip forward button, optional, default: false\n  hasSkipBackward : true, // show skip backward button, optional, default: false\n  skipForwardInterval: 15, // display number for skip forward, optional, default: 0\n  skipBackwardInterval: 15, // display number for skip backward, optional, default: 0\n  hasScrubbing: false, // enable scrubbing from control center and lockscreen progress bar, optional\n\n  // Android only, optional\n  // text displayed in the status bar when the notification (and the ticker) are updated, optional\n  ticker    : 'Now playing \"Time is Running Out\"',\n  // All icons default to their built-in android equivalents\n  playIcon: 'media_play',\n  pauseIcon: 'media_pause',\n  prevIcon: 'media_prev',\n  nextIcon: 'media_next',\n  closeIcon: 'media_close',\n  notificationIcon: 'notification'\n });\n\n this.musicControls.subscribe().subscribe(action => {\n\n   function events(action) {\n     const message = JSON.parse(action).message;\n     \tswitch(message) {\n     \t\tcase 'music-controls-next':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-previous':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-pause':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-play':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-destroy':\n     \t\t\t// Do something\n     \t\t\tbreak;\n\n         // External controls (iOS only)\n         case 'music-controls-toggle-play-pause' :\n     \t\t\t// Do something\n     \t\t\tbreak;\n         case 'music-controls-seek-to':\n           const seekToInSeconds = JSON.parse(action).position;\n           this.musicControls.updateElapsed({\n             elapsed: seekToInSeconds,\n             isPlaying: true\n           });\n           // Do something\n           break;\n         case 'music-controls-skip-forward':\n           // Do something\n           break;\n         case 'music-controls-skip-backward':\n           // Do something\n           break;\n\n     \t\t// Headset events (Android only)\n     \t\t// All media button events are listed below\n     \t\tcase 'music-controls-media-button' :\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-headset-unplugged':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tcase 'music-controls-headset-plugged':\n     \t\t\t// Do something\n     \t\t\tbreak;\n     \t\tdefault:\n     \t\t\tbreak;\n     \t}\n     }\n\n this.musicControls.listen(); // activates the observable above\n\n this.musicControls.updateIsPlaying(true);\n\n\n```",
  "platforms": [
    "Android",
    "iOS",
    "Windows"
  ],
  "repo": "https://github.com/homerours/cordova-music-controls-plugin",
  "cordovaPlugin": {
    "name": "cordova-plugin-music-controls"
  }
}