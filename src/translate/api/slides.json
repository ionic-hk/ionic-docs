{
  "tag": "ion-slides",
  "encapsulation": "none",
  "readme": "# ion-slides\n\nThe Slides component is a multi-section container. Each section can be swiped\nor dragged between. It contains any number of [Slide](../slide) components.\n\n\nAdopted from Swiper.js:\nThe most modern mobile touch slider and framework with hardware accelerated transitions.\n\nhttp://www.idangero.us/swiper/\n\nCopyright 2016, Vladimir Kharlampidi\nThe iDangero.us\nhttp://www.idangero.us/\n\nLicensed under MIT\n\n### Custom Animations\n\nBy default, Ionic slides use the built-in `slide` animation effect. Custom animations can be provided via the `options` property. Examples of other animations can be found below.\n\n\n#### Coverflow\n\n```typescript\nconst slidesOpts = {\n  slidesPerView: 3,\n  coverflowEffect: {\n    rotate: 50,\n    stretch: 0,\n    depth: 100,\n    modifier: 1,\n    slideShadows: true,\n  },\n  on: {\n    beforeInit() {\n      const swiper = this;\n\n      swiper.classNames.push(`${swiper.params.containerModifierClass}coverflow`);\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n\n      swiper.params.watchSlidesProgress = true;\n      swiper.originalParams.watchSlidesProgress = true;\n    },\n    setTranslate() {\n      const swiper = this;\n      const {\n        width: swiperWidth, height: swiperHeight, slides, $wrapperEl, slidesSizesGrid, $\n      } = swiper;\n      const params = swiper.params.coverflowEffect;\n      const isHorizontal = swiper.isHorizontal();\n      const transform$$1 = swiper.translate;\n      const center = isHorizontal ? -transform$$1 + (swiperWidth / 2) : -transform$$1 + (swiperHeight / 2);\n      const rotate = isHorizontal ? params.rotate : -params.rotate;\n      const translate = params.depth;\n      // Each slide offset from center\n      for (let i = 0, length = slides.length; i < length; i += 1) {\n        const $slideEl = slides.eq(i);\n        const slideSize = slidesSizesGrid[i];\n        const slideOffset = $slideEl[0].swiperSlideOffset;\n        const offsetMultiplier = ((center - slideOffset - (slideSize / 2)) / slideSize) * params.modifier;\n  \n         let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n        let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n        // var rotateZ = 0\n        let translateZ = -translate * Math.abs(offsetMultiplier);\n  \n         let translateY = isHorizontal ? 0 : params.stretch * (offsetMultiplier);\n        let translateX = isHorizontal ? params.stretch * (offsetMultiplier) : 0;\n  \n         // Fix for ultra small values\n        if (Math.abs(translateX) < 0.001) translateX = 0;\n        if (Math.abs(translateY) < 0.001) translateY = 0;\n        if (Math.abs(translateZ) < 0.001) translateZ = 0;\n        if (Math.abs(rotateY) < 0.001) rotateY = 0;\n        if (Math.abs(rotateX) < 0.001) rotateX = 0;\n  \n         const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n  \n         $slideEl.transform(slideTransform);\n        $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n        if (params.slideShadows) {\n          // Set shadows\n          let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n          let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n          if ($shadowBeforeEl.length === 0) {\n            $shadowBeforeEl = swiper.$(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}\"></div>`);\n            $slideEl.append($shadowBeforeEl);\n          }\n          if ($shadowAfterEl.length === 0) {\n            $shadowAfterEl = swiper.$(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}\"></div>`);\n            $slideEl.append($shadowAfterEl);\n          }\n          if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n          if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0;\n        }\n      }\n  \n       // Set correct perspective for IE10\n      if (swiper.support.pointerEvents || swiper.support.prefixedPointerEvents) {\n        const ws = $wrapperEl[0].style;\n        ws.perspectiveOrigin = `${center}px 50%`;\n      }\n    },\n    setTransition(duration) {\n      const swiper = this;\n      swiper.slides\n        .transition(duration)\n        .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')\n        .transition(duration);\n    }\n  }\n}\n```\n\n#### Cube\n\n```typescript\nconst slidesOpts = {\n  grabCursor: true,\n  cubeEffect: {\n    shadow: true,\n    slideShadows: true,\n    shadowOffset: 20,\n    shadowScale: 0.94,\n  },\n  on: {\n    beforeInit: function() {\n      const swiper = this;\n      swiper.classNames.push(`${swiper.params.containerModifierClass}cube`);\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n      \n      const overwriteParams = {\n        slidesPerView: 1,\n        slidesPerColumn: 1,\n        slidesPerGroup: 1,\n        watchSlidesProgress: true,\n        resistanceRatio: 0,\n        spaceBetween: 0,\n        centeredSlides: false,\n        virtualTranslate: true,\n      };\n      \n      this.params = Object.assign(this.params, overwriteParams);\n      this.originalParams = Object.assign(this.originalParams, overwriteParams);\n    },\n    setTranslate: function() {\n      const swiper = this;\n      const {\n        $el, $wrapperEl, slides, width: swiperWidth, height: swiperHeight, rtlTranslate: rtl, size: swiperSize,\n      } = swiper;\n      const params = swiper.params.cubeEffect;\n      const isHorizontal = swiper.isHorizontal();\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      let wrapperRotate = 0;\n      let $cubeShadowEl;\n      if (params.shadow) {\n        if (isHorizontal) {\n          $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');\n          if ($cubeShadowEl.length === 0) {\n            $cubeShadowEl = swiper.$('<div class=\"swiper-cube-shadow\"></div>');\n            $wrapperEl.append($cubeShadowEl);\n          }\n          $cubeShadowEl.css({ height: `${swiperWidth}px` });\n        } else {\n          $cubeShadowEl = $el.find('.swiper-cube-shadow');\n          if ($cubeShadowEl.length === 0) {\n            $cubeShadowEl = swiper.$('<div class=\"swiper-cube-shadow\"></div>');\n            $el.append($cubeShadowEl);\n          }\n        }\n      }\n      \n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = slides.eq(i);\n        let slideIndex = i;\n        if (isVirtual) {\n          slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);\n        }\n        let slideAngle = slideIndex * 90;\n        let round = Math.floor(slideAngle / 360);\n        if (rtl) {\n          slideAngle = -slideAngle;\n          round = Math.floor(-slideAngle / 360);\n        }\n        const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n        let tx = 0;\n        let ty = 0;\n        let tz = 0;\n        if (slideIndex % 4 === 0) {\n          tx = -round * 4 * swiperSize;\n          tz = 0;\n        } else if ((slideIndex - 1) % 4 === 0) {\n          tx = 0;\n          tz = -round * 4 * swiperSize;\n        } else if ((slideIndex - 2) % 4 === 0) {\n          tx = swiperSize + (round * 4 * swiperSize);\n          tz = swiperSize;\n        } else if ((slideIndex - 3) % 4 === 0) {\n          tx = -swiperSize;\n          tz = (3 * swiperSize) + (swiperSize * 4 * round);\n        }\n        if (rtl) {\n          tx = -tx;\n        }\n  \n         if (!isHorizontal) {\n          ty = tx;\n          tx = 0;\n        }\n  \n         const transform$$1 = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n        if (progress <= 1 && progress > -1) {\n          wrapperRotate = (slideIndex * 90) + (progress * 90);\n          if (rtl) wrapperRotate = (-slideIndex * 90) - (progress * 90);\n        }\n        $slideEl.transform(transform$$1);\n        if (params.slideShadows) {\n          // Set shadows\n          let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n          let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n          if (shadowBefore.length === 0) {\n            shadowBefore = swiper.$(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}\"></div>`);\n            $slideEl.append(shadowBefore);\n          }\n          if (shadowAfter.length === 0) {\n            shadowAfter = swiper.$(`<div class=\"swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}\"></div>`);\n            $slideEl.append(shadowAfter);\n          }\n          if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n          if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n        }\n      }\n      $wrapperEl.css({\n        '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,\n        '-moz-transform-origin': `50% 50% -${swiperSize / 2}px`,\n        '-ms-transform-origin': `50% 50% -${swiperSize / 2}px`,\n        'transform-origin': `50% 50% -${swiperSize / 2}px`,\n      });\n  \n       if (params.shadow) {\n        if (isHorizontal) {\n          $cubeShadowEl.transform(`translate3d(0px, ${(swiperWidth / 2) + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);\n        } else {\n          const shadowAngle = Math.abs(wrapperRotate) - (Math.floor(Math.abs(wrapperRotate) / 90) * 90);\n          const multiplier = 1.5 - (\n            (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2)\n            + (Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2)\n          );\n          const scale1 = params.shadowScale;\n          const scale2 = params.shadowScale / multiplier;\n          const offset$$1 = params.shadowOffset;\n          $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${(swiperHeight / 2) + offset$$1}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);\n        }\n      }\n\n      const zFactor = (swiper.browser.isSafari || swiper.browser.isUiWebView) ? (-swiperSize / 2) : 0;\n      $wrapperEl\n        .transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);\n    },\n    setTransition: function(duration) {\n      const swiper = this;\n      const { $el, slides } = swiper;\n      slides\n        .transition(duration)\n        .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')\n        .transition(duration);\n      if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n        $el.find('.swiper-cube-shadow').transition(duration);\n      }\n    },\n  }\n}\n```\n\n#### Fade\n\n```typescript\nconst slidesOpts = {\n  on: {\n    beforeInit() {\n      const swiper = this;\n      swiper.classNames.push(`${swiper.params.containerModifierClass}fade`);\n      const overwriteParams = {\n        slidesPerView: 1,\n        slidesPerColumn: 1,\n        slidesPerGroup: 1,\n        watchSlidesProgress: true,\n        spaceBetween: 0,\n        virtualTranslate: true,\n      };\n      swiper.params = Object.assign(swiper.params, overwriteParams);\n      swiper.params = Object.assign(swiper.originalParams, overwriteParams);\n    },\n    setTranslate() {\n      const swiper = this;\n      const { slides } = swiper;\n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = swiper.slides.eq(i);\n        const offset$$1 = $slideEl[0].swiperSlideOffset;\n        let tx = -offset$$1;\n        if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n        let ty = 0;\n        if (!swiper.isHorizontal()) {\n          ty = tx;\n          tx = 0;\n        }\n        const slideOpacity = swiper.params.fadeEffect.crossFade\n          ? Math.max(1 - Math.abs($slideEl[0].progress), 0)\n          : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n        $slideEl\n          .css({\n            opacity: slideOpacity,\n          })\n          .transform(`translate3d(${tx}px, ${ty}px, 0px)`);\n      }\n    },\n    setTransition(duration) {\n      const swiper = this;\n      const { slides, $wrapperEl } = swiper;\n      slides.transition(duration);\n      if (swiper.params.virtualTranslate && duration !== 0) {\n        let eventTriggered = false;\n        slides.transitionEnd(() => {\n          if (eventTriggered) return;\n          if (!swiper || swiper.destroyed) return;\n          eventTriggered = true;\n          swiper.animating = false;\n          const triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n          for (let i = 0; i < triggerEvents.length; i += 1) {\n            $wrapperEl.trigger(triggerEvents[i]);\n          }\n        });\n      }\n    },\n  }\n}    \n```\n\n#### Flip\n\n```typescript\nconst slideOpts = {\n  on: {\n    beforeInit() {\n      const swiper = this;\n      swiper.classNames.push(`${swiper.params.containerModifierClass}flip`);\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n      const overwriteParams = {\n        slidesPerView: 1,\n        slidesPerColumn: 1,\n        slidesPerGroup: 1,\n        watchSlidesProgress: true,\n        spaceBetween: 0,\n        virtualTranslate: true,\n      };\n      swiper.params = Object.assign(swiper.params, overwriteParams);\n      swiper.originalParams = Object.assign(swiper.originalParams, overwriteParams);\n    },\n    setTranslate() {\n      const swiper = this;\n      const { $, slides, rtlTranslate: rtl } = swiper;\n      for (let i = 0; i < slides.length; i += 1) {\n        const $slideEl = slides.eq(i);\n        let progress = $slideEl[0].progress;\n        if (swiper.params.flipEffect.limitRotation) {\n          progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n        }\n        const offset$$1 = $slideEl[0].swiperSlideOffset;\n        const rotate = -180 * progress;\n        let rotateY = rotate;\n        let rotateX = 0;\n        let tx = -offset$$1;\n        let ty = 0;\n        if (!swiper.isHorizontal()) {\n          ty = tx;\n          tx = 0;\n          rotateX = -rotateY;\n          rotateY = 0;\n        } else if (rtl) {\n          rotateY = -rotateY;\n        }\n  \n         $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n  \n         if (swiper.params.flipEffect.slideShadows) {\n          // Set shadows\n          let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n          let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n          if (shadowBefore.length === 0) {\n            shadowBefore = swiper.$(`<div class=\"swiper-slide-shadow-${swiper.isHorizontal() ? 'left' : 'top'}\"></div>`);\n            $slideEl.append(shadowBefore);\n          }\n          if (shadowAfter.length === 0) {\n            shadowAfter = swiper.$(`<div class=\"swiper-slide-shadow-${swiper.isHorizontal() ? 'right' : 'bottom'}\"></div>`);\n            $slideEl.append(shadowAfter);\n          }\n          if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n          if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n        }\n        $slideEl\n          .transform(`translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`);\n      }\n    },\n    setTransition(duration) {\n      const swiper = this;\n      const { slides, activeIndex, $wrapperEl } = swiper;\n      slides\n        .transition(duration)\n        .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')\n        .transition(duration);\n      if (swiper.params.virtualTranslate && duration !== 0) {\n        let eventTriggered = false;\n        // eslint-disable-next-line\n        slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {\n          if (eventTriggered) return;\n          if (!swiper || swiper.destroyed) return;\n  \n          eventTriggered = true;\n          swiper.animating = false;\n          const triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n          for (let i = 0; i < triggerEvents.length; i += 1) {\n            $wrapperEl.trigger(triggerEvents[i]);\n          }\n        });\n      }\n    }\n  }\n};\n```\n",
  "docs": "The Slides component is a multi-section container. Each section can be swiped\nor dragged between. It contains any number of [Slide](../slide) components.\n\n\nAdopted from Swiper.js:\nThe most modern mobile touch slider and framework with hardware accelerated transitions.\n\nhttp://www.idangero.us/swiper/\n\nCopyright 2016, Vladimir Kharlampidi\nThe iDangero.us\nhttp://www.idangero.us/\n\nLicensed under MIT",
  "docsTags": [],
  "usage": {
    "angular": "```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'slides-example',\n  template: `\n    <ion-slides pager=\"true\" [options]=\"slideOpts\">\n      <ion-slide>\n        <h1>Slide 1</h1>\n      </ion-slide>\n      <ion-slide>\n        <h1>Slide 2</h1>\n      </ion-slide>\n      <ion-slide>\n        <h1>Slide 3</h1>\n      </ion-slide>\n    </ion-slides>\n  `\n})\nexport class SlideExample {\n  // Optional parameters to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options.\n  slideOpts = {\n    initialSlide: 1,\n    speed: 400\n  };\n  constructor() {}\n}\n```\n",
    "javascript": "```html\n  <ion-slides pager=\"true\">\n\n    <ion-slide>\n      <h1>Slide 1</h1>\n    </ion-slide>\n\n    <ion-slide>\n      <h1>Slide 2</h1>\n    </ion-slide>\n\n    <ion-slide>\n      <h1>Slide 3</h1>\n    </ion-slide>\n  </ion-slides>\n```\n\n```javascript\nvar slides = document.querySelector('ion-slides');\n\n// Optional parameters to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options.\nslides.options = {\n  initialSlide: 1,\n  speed: 400\n}\n```\n",
    "react": "```tsx\nimport React from 'react';\n\nimport { IonSlides, IonSlide } from '@ionic/react';\n\n// Optional parameters to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options.\nconst slideOpts = {\n  initialSlide: 1,\n  speed: 400\n};\n\nconst Example: React.SFC<{}> = () => (\n  <IonSlides pager={true} options={slideOpts}>\n    <IonSlide>\n      <h1>Slide 1</h1>\n    </IonSlide>\n    <IonSlide>\n      <h1>Slide 2</h1>\n    </IonSlide>\n    <IonSlide>\n      <h1>Slide 3</h1>\n    </IonSlide>\n  </IonSlides>\n);\n\nexport default Example;\n```\n",
    "vue": "```html\n<template>\n  <ion-slides pager=\"true\" :options=\"slideOpts\">\n    <ion-slide>\n      <h1>Slide 1</h1>\n    </ion-slide>\n    <ion-slide>\n      <h1>Slide 2</h1>\n    </ion-slide>\n    <ion-slide>\n      <h1>Slide 3</h1>\n    </ion-slide>\n  </ion-slides>\n</template>\n\n\n<script lang=\"ts\">\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component()\n  export default class Example extends Vue {\n    // Optional parameters to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options.\n    slideOpts = {\n      initialSlide: 1,\n      speed: 400\n    };\n  }\n</script>\n```\n"
  },
  "props": [
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "optional": false,
      "required": false
    },
    {
      "name": "options",
      "type": "any",
      "mutable": false,
      "attr": "options",
      "reflectToAttr": false,
      "docs": "Options to pass to the swiper instance.\nSee http://idangero.us/swiper/api/ for valid options",
      "docsTags": [],
      "default": "{}",
      "optional": false,
      "required": false
    },
    {
      "name": "pager",
      "type": "boolean",
      "mutable": false,
      "attr": "pager",
      "reflectToAttr": false,
      "docs": "If `true`, show the pagination.",
      "docsTags": [],
      "default": "false",
      "optional": false,
      "required": false
    },
    {
      "name": "scrollbar",
      "type": "boolean",
      "mutable": false,
      "attr": "scrollbar",
      "reflectToAttr": false,
      "docs": "If `true`, show the scrollbar.",
      "docsTags": [],
      "default": "false",
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "getActiveIndex",
      "returns": {
        "type": "Promise<number>",
        "docs": ""
      },
      "signature": "getActiveIndex() => Promise<number>",
      "parameters": [],
      "docs": "Get the index of the active slide.",
      "docsTags": []
    },
    {
      "name": "getPreviousIndex",
      "returns": {
        "type": "Promise<number>",
        "docs": ""
      },
      "signature": "getPreviousIndex() => Promise<number>",
      "parameters": [],
      "docs": "Get the index of the previous slide.",
      "docsTags": []
    },
    {
      "name": "isBeginning",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "isBeginning() => Promise<boolean>",
      "parameters": [],
      "docs": "Get whether or not the current slide is the first slide.",
      "docsTags": []
    },
    {
      "name": "isEnd",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "isEnd() => Promise<boolean>",
      "parameters": [],
      "docs": "Get whether or not the current slide is the last slide.",
      "docsTags": []
    },
    {
      "name": "length",
      "returns": {
        "type": "Promise<number>",
        "docs": ""
      },
      "signature": "length() => Promise<number>",
      "parameters": [],
      "docs": "Get the total number of slides.",
      "docsTags": []
    },
    {
      "name": "lockSwipeToNext",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "lockSwipeToNext(lock: boolean) => Promise<void>",
      "parameters": [
        {
          "name": "lock",
          "type": "boolean",
          "docs": "If `true`, disable swiping to the next slide."
        }
      ],
      "docs": "Lock or unlock the ability to slide to the next slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "lock If `true`, disable swiping to the next slide."
        }
      ]
    },
    {
      "name": "lockSwipeToPrev",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "lockSwipeToPrev(lock: boolean) => Promise<void>",
      "parameters": [
        {
          "name": "lock",
          "type": "boolean",
          "docs": "If `true`, disable swiping to the previous slide."
        }
      ],
      "docs": "Lock or unlock the ability to slide to the previous slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "lock If `true`, disable swiping to the previous slide."
        }
      ]
    },
    {
      "name": "lockSwipes",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "lockSwipes(lock: boolean) => Promise<void>",
      "parameters": [
        {
          "name": "lock",
          "type": "boolean",
          "docs": "If `true`, disable swiping to the next and previous slide."
        }
      ],
      "docs": "Lock or unlock the ability to slide to the next or previous slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "lock If `true`, disable swiping to the next and previous slide."
        }
      ]
    },
    {
      "name": "slideNext",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "slideNext(speed?: number | undefined, runCallbacks?: boolean | undefined) => Promise<void>",
      "parameters": [
        {
          "name": "speed",
          "type": "number | undefined",
          "docs": "The transition duration (in ms)."
        },
        {
          "name": "runCallbacks",
          "type": "boolean | undefined",
          "docs": "If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
        }
      ],
      "docs": "Transition to the next slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        },
        {
          "name": "param",
          "text": "runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
        }
      ]
    },
    {
      "name": "slidePrev",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "slidePrev(speed?: number | undefined, runCallbacks?: boolean | undefined) => Promise<void>",
      "parameters": [
        {
          "name": "speed",
          "type": "number | undefined",
          "docs": "The transition duration (in ms)."
        },
        {
          "name": "runCallbacks",
          "type": "boolean | undefined",
          "docs": "If true, the transition will produce the [Transition/SlideChange][Start/End] transition events."
        }
      ],
      "docs": "Transition to the previous slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        },
        {
          "name": "param",
          "text": "runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events."
        }
      ]
    },
    {
      "name": "slideTo",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "slideTo(index: number, speed?: number | undefined, runCallbacks?: boolean | undefined) => Promise<void>",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "docs": "The index of the slide to transition to."
        },
        {
          "name": "speed",
          "type": "number | undefined",
          "docs": "The transition duration (in ms)."
        },
        {
          "name": "runCallbacks",
          "type": "boolean | undefined",
          "docs": "If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
        }
      ],
      "docs": "Transition to the specified slide.",
      "docsTags": [
        {
          "name": "param",
          "text": "index The index of the slide to transition to."
        },
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        },
        {
          "name": "param",
          "text": "runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events."
        }
      ]
    },
    {
      "name": "startAutoplay",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "startAutoplay() => Promise<void>",
      "parameters": [],
      "docs": "Start auto play.",
      "docsTags": []
    },
    {
      "name": "stopAutoplay",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "stopAutoplay() => Promise<void>",
      "parameters": [],
      "docs": "Stop auto play.",
      "docsTags": []
    },
    {
      "name": "update",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "update() => Promise<void>",
      "parameters": [],
      "docs": "Update the underlying slider implementation. Call this if you've added or removed\nchild slides.",
      "docsTags": []
    },
    {
      "name": "updateAutoHeight",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "updateAutoHeight(speed?: number | undefined) => Promise<void>",
      "parameters": [
        {
          "name": "speed",
          "type": "number | undefined",
          "docs": "The transition duration (in ms)."
        }
      ],
      "docs": "Force swiper to update its height (when autoHeight is enabled) for the duration\nequal to 'speed' parameter.",
      "docsTags": [
        {
          "name": "param",
          "text": "speed The transition duration (in ms)."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionSlideDidChange",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the active slide has changed.",
      "docsTags": []
    },
    {
      "event": "ionSlideDoubleTap",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user double taps on the slide's container.",
      "docsTags": []
    },
    {
      "event": "ionSlideDrag",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slider is actively being moved.",
      "docsTags": []
    },
    {
      "event": "ionSlideNextEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the next slide has ended.",
      "docsTags": []
    },
    {
      "event": "ionSlideNextStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the next slide has started.",
      "docsTags": []
    },
    {
      "event": "ionSlidePrevEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the previous slide has ended.",
      "docsTags": []
    },
    {
      "event": "ionSlidePrevStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the previous slide has started.",
      "docsTags": []
    },
    {
      "event": "ionSlideReachEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slider is at the last slide.",
      "docsTags": []
    },
    {
      "event": "ionSlideReachStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slider is at its initial position.",
      "docsTags": []
    },
    {
      "event": "ionSlidesDidLoad",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after Swiper initialization",
      "docsTags": []
    },
    {
      "event": "ionSlideTap",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user taps/clicks on the slide's container.",
      "docsTags": []
    },
    {
      "event": "ionSlideTouchEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user releases the touch.",
      "docsTags": []
    },
    {
      "event": "ionSlideTouchStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the user first touches the slider.",
      "docsTags": []
    },
    {
      "event": "ionSlideTransitionEnd",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slide transition has ended.",
      "docsTags": []
    },
    {
      "event": "ionSlideTransitionStart",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the slide transition has started.",
      "docsTags": []
    },
    {
      "event": "ionSlideWillChange",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the active slide has changed.",
      "docsTags": []
    }
  ],
  "styles": [
    {
      "name": "--bullet-background",
      "annotation": "prop",
      "docs": "Background of the pagination bullets"
    },
    {
      "name": "--bullet-background-active",
      "annotation": "prop",
      "docs": "Background of the active pagination bullet"
    }
  ],
  "slots": []
}